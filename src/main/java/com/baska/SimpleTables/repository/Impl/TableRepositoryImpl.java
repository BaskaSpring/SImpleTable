package com.baska.SimpleTables.repository.Impl;

import com.baska.SimpleTables.dto.table.CreateRequest;
import com.baska.SimpleTables.dto.table.CreateTableType;
import com.baska.SimpleTables.model.Tables;
import com.baska.SimpleTables.model.Type;
import com.baska.SimpleTables.repository.TableRepository;
import com.baska.SimpleTables.repository.TablesReposotiry;
import lombok.RequiredArgsConstructor;
import lombok.SneakyThrows;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.HashMap;
import java.util.Set;

@Repository
@RequiredArgsConstructor
public class TableRepositoryImpl implements TableRepository {

    private final JdbcTemplate jdbcTemplate;
    private final TablesReposotiry tablesReposotiry;

    @SneakyThrows
    private String getColumnQuery(Set<CreateTableType> columns){
        String stingColumns = "";
        String type = "";
        for (CreateTableType tableType: columns) {
            if (!tableType.getOtherTable()) {
                switch (tableType.getType()) {
                    case DATE:
                        type = "TIMESTAMP";
                        break;
                    case NUMBER:
                        type = "DECIMAL(20,2)";
                        break;
                    case BOOLEAN:
                        type = "BOOLEAN";
                        break;
                    case STRING:
                        type = "VARCHAR(250)";
                        break;
                    default:
                }
            } else {
                String tableName = tablesReposotiry.takeNameById(tableType.getTableId());
                type = "int references "+tableName+"(id)";
            }
            stingColumns = stingColumns + tableType.getName() + " " + type + ", ";
        }
        return stingColumns;
    }

    private String createTableQuery(String name,String columns) {
         return "create table " + name + " ("+columns+" id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY)";
    }

    @Override
    public void create(CreateRequest request) {
        String columns = getColumnQuery(request.getColumns());
        String query = createTableQuery(request.getName(),columns);
        System.out.println(query);
        jdbcTemplate.execute(query);
    }

    @Override
    public void saveData(HashMap<String,Object> data, Tables table) {
        String columns = "";
        String values = "";
        for(Type type :table.getColumns()){
            columns = columns + type.getName()+",";
            String value = "";
            if (!type.getOtherTable()){
                Object v = data.get(type.getName());
                if (v instanceof Integer){
                    value = Integer.toString((int)v);
                } else{
                    value = v.toString();
                }
                switch (type.getPrimitiveType()) {
                    case NUMBER:
                        values = values +value + ",";
                        break;
                    case DATE:
                        values = values + " to_timestamp('" +value + "', 'dd-mm-yyyy hh24:mi:ss'),";
                        break;
                    default:
                        values = values +"'"+value + "',";
                        break;
                }
            } else{
                value = data.get(type.getName()).toString();
                values = values + value + ",";
            }
        }
        columns = columns.substring(0, columns.length() - 1);
        values = values.substring(0, values.length() - 1);
        String query = "INSERT INTO "+table.getName()+"("+columns+") VALUES ("+values+")";
        System.out.println(query);
        jdbcTemplate.execute(query);
    }

    @Override
    public Boolean findDataTable(Long tableId, int postId) {


        return true;
    }


}
